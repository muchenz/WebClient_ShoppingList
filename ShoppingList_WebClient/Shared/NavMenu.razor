@implements IDisposable

@using Services
@using Data
@using System.Security.Claims;
@using Microsoft.AspNetCore.SignalR.Client;

@inject SignalRService signalRService
@inject UserService userService
@inject AuthenticationStateProvider authenticationStateProvider
@inject StateService stateInfoService


<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">BlazorClient</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="shoppinglist">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Shopping list
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="userspermissions">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Users permissions
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="invitations">
                @if (NuberOfInvitations > 0)
                {
                    <span><span class="oi oi-list-rich" aria-hidden="true"></span> Invitations <span class="text-danger small">(NEW @NuberOfInvitations)</span></span>
                }
                else
                {
                    <span><span class="oi oi-list-rich" aria-hidden="true"></span> Invitations </span>

                }
            </NavLink>
        </li>
    </ul>
</div>





@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            var authProvider = await authenticationStateProvider.GetAuthenticationStateAsync();

            var userId = authProvider.User.Claims.Where(a => a.Type.EndsWith("nameidentifier")).FirstOrDefault()?.Value;

            if (userId != null)
            {
                NuberOfInvitations = (await userService.GetInvitationsListAsync()).Count;
            }


            Console.WriteLine($"NavMenu userid {userId}");

            authProvider.User.Claims.ToList().ForEach(a => Console.WriteLine($"claims {a.Type}, value {a.Value}"));

            // if (userId != null)
            SignalRInit();

            authenticationStateProvider.AuthenticationStateChanged += async task =>
                        {
                            var authState = await task;
                            var user = authState.User;

                            if (user.Identity?.IsAuthenticated == true && SignalRToDispose != null)
                            {
                                return;
                            }

                            if (user.Identity?.IsAuthenticated == true && SignalRToDispose == null)
                            {
                                SignalRInit();
                                return;
                            }
                            SignalRToDispose?.Dispose();
                            SignalRToDispose = null;
                        };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{ex}");

        }
    }


    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


    int NuberOfInvitations;

    void SignalRInit()
    {

        signalRService.JoinToHub(() =>
        SignalRToDispose = signalRService.RegisterInvitationAreChanedHandlers
       (async () =>
          await SignalRHandlers.SignalRInvitationInitAsync(
       userService,
       (_) => { },
       (a) => NuberOfInvitations = a,
       () => InvokeAsync(StateHasChanged)
       )));



    }

    IDisposable SignalRToDispose;

    public void Dispose()
    {
        SignalRToDispose?.Dispose();
        SignalRToDispose = null;
        
    }
}

