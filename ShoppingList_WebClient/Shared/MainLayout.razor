@inherits LayoutComponentBase

@using Blazored.Toast.Configuration
@using Microsoft.Extensions.Configuration;
@using Services;
@using ShoppingList_WebClient.Data
@using ShoppingList_WebClient.Pages

@inject IConfiguration configuration
@inject StateService stateService
@inject SignalRService signalRService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject AuthenticationStateProvider authenticationStateProvider

<BlazoredToasts Position="ToastPosition.BottomRight"
Timeout="3"
IconType="IconType.FontAwesome"
SuccessClass="success-toast-override"
SuccessIcon="fa fa-thumbs-up"
ErrorIcon="fa fa-bug" />
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            <LoginDisplay />

            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>


@code{

    [CascadingParameter]
    public Error Error { get; set; }
    private bool _signalRStarted = false;
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var isGid = await localStorageService.ContainKeyAsync("gid");
        if (isGid is false)
        {
            await localStorageService.SetItemAsync("gid", Guid.NewGuid().ToString());
        }


        authenticationStateProvider.AuthenticationStateChanged += async task =>
        {
            var authState = await task;
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true && !_signalRStarted)
            {
                _signalRStarted = true;
                await signalRService.StartConnectionAsync();
            }
            else if (!user.Identity?.IsAuthenticated == true && _signalRStarted)
            {
                _signalRStarted = false;
                await signalRService.StopConnectionAsync();
            }
        };

        var authState = await authenticationState;

        var isAuth = authState.User.Identity?.IsAuthenticated ?? false;

        if (!signalRService.IsConnected && isAuth)
            await signalRService.StartConnectionAsync();


    }
    
}