@page "/invitations"
@*@attribute [Authorize]*@
@implements IDisposable

@using System.Security.Claims;
@using Data

@using Services
@using Models
@using Blazored.LocalStorage;
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.SignalR.Client;

@inject UserService userService
@inject ShoppingListService shoppingListService
@inject ILocalStorageService localStorage
@*@inject IModalService Modal*@
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject ILogger<Invitations> _logger
@inject StateInfoService stateInfoService

<h3>Invitations1</h3>

<div class="container">

    <div class="row">
        <div class="col-8">

            <div class="">
                <ul class="nav flex-column">

                    @if (invitationsList != null)
                        @foreach (var item in invitationsList)
                        {
                            @*<li class="list-group-item-light p-1">

                                    <div class="btn btn-block btn-light" style="cursor: pointer"
                                            @onclick="(() => ListAggregationClicked(item))">
                                        <span class="oi oi-plus" aria-hidden="true"></span> @item.ListAggregatorName
                                    </div>
                                </li>*@


                            <li class="p-1">

                                <table style="width:100%">
                                    <tr>
                                        <td style="width:100%">
                                            <div class="btn btn-block btn-light">
                                                Invitation from '@item.SenderName' to '@item.ListAggregatorName'
                                            </div>

                                        </td>

                                        <td>
                                            <a style="text-underline-position:below; cursor:pointer; color:blue; display:inline;
                                " @onclick="(() => AcceptInvitation(item))">Accept</a>

                                            <a class="" style="text-underline-position:below; cursor:pointer; color:blue; display:inline;
                                                " @onclick="(() => RejectInvitaion(item))">Reject</a>

                                        </td>
                                    </tr>
                                </table>

                            </li>
                        }
                </ul>
            </div>


        </div>

    </div>
</div>



@code {
    List<Invitation> invitationsList;
    [CascadingParameter] public IModalService Modal { get; set; }
    async Task LoadInvitationList()
    {
        _logger.LogError("alla");

        try
        {
            var authProvider = await authenticationStateProvider.GetAuthenticationStateAsync();
            var userName = authProvider.User.Identity.Name;

            invitationsList = await userService.GetInvitationsListAsync(userName);

            //_logger.LogError("alla2", userId);

        }
        catch
        {

            ((ShoppingList_WebClient.Data.CustomAuthenticationStateProvider)authenticationStateProvider).MarkUserAsLoggedOut();

            navigationManager.NavigateTo("login");

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await LoadInvitationList();
            await SignalRInit();
            StateHasChanged();

        }

        await base.OnAfterRenderAsync(firstRender);
    }

    async Task SignalRInit()
    {

        var authProvider = await authenticationStateProvider.GetAuthenticationStateAsync();

        var userId = authProvider.User.Claims.Where(a => a.Type == ClaimTypes.NameIdentifier).FirstOrDefault()?.Value;

        async Task SignalRInitAsync(HubConnection _)
        {

            SignalRToDispose = await SignalRHelper.SignalRInvitationInitAsync(
                    int.Parse(userId),
                    authenticationStateProvider,
                    userService,
                    (a) => invitationsList = a,
                    (_) => { },
                    StateHasChanged);
        }

        stateInfoService.HubState.JoinToHub(SignalRInitAsync);
    }

    public async Task AcceptInvitation(Invitation item)
    {

        await userService.AcceptInvitationAsync(item);
        await LoadInvitationList();

    }

    public async Task RejectInvitaion(Invitation item)
    {

        await userService.RejectInvitaionAsync(item);
        await LoadInvitationList();

    }

    List<IDisposable> SignalRToDispose;

    public void Dispose()
    {
        SignalRToDispose?.ForEach(a => a?.Dispose());
    }

}
