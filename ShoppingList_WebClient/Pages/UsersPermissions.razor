@page "/userspermissions"
@*@attribute [Authorize]*@

@using Services
@using Models
@using Blazored.LocalStorage;
@inject UserService userService
@inject ShoppingListService shoppingListService
@inject ILocalStorageService localStorage
@*@inject IModalService Modal*@
@inject AuthenticationStateProvider authenticationStateProvider
@inject BrowserService broserService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

<div class="container" style="@styleForContainer">

    <div class="row">
        <div class="col-lg-4">
            <div class="">
                <ul class="nav flex-column">

                    @if (data != null)
                        @foreach (var item in data)
                        {
                            @*<li class="list-group-item-light p-1">

                                    <div class="btn btn-block btn-light" style="cursor: pointer"
                                            @onclick="(() => ListAggregationClicked(item))">
                                        <span class="oi oi-plus" aria-hidden="true"></span> @item.ListAggregatorName
                                    </div>
                                </li>*@


                            <li class="p-1">

                                @*<ListItemComponent DeleteItemEvent="(() => DeleteListAggregator(item))"
                                    EditItemEvent="(() => EditListAggregator(item))"
                                    EditListItemId="EditListAggregatorId"
                                    item="@item"
                                    ChoosedItemId="@listAggregatorChoosed?.ListAggregatorId"
                                    ListItemClickedEvent="(() => ListAggregationClicked(item))"
                                    ListItemDragStartEvent="(() => ListDragStart(null))"
                                    ListItemDropEvent="(() => ListDrop(null))"
                                    SaveItemEvent="(() => SaveListAggregator(item))"></ListItemComponent>*@
                                <ListItemComponent item="@item.ListAggregator"
                                                   ListItemClickedEvent="(() => ListAggregationClicked(item))"
                                                   ChoosedItemId="@chosedListAggrId"></ListItemComponent>



                            </li>
                        }
                </ul>
            </div>
        </div>



        <div class="col-lg-8">
            <div class="">
                <ul class="nav flex-column">

                    @if (chosedListPermission != null)
                        @foreach (var item in chosedListPermission)
                        {
                            @*<li class="list-group-item-light p-1">

                                    <div class="btn btn-block btn-light" style="cursor: pointer"
                                            @onclick="(() => ListAggregationClicked(item))">
                                        <span class="oi oi-plus" aria-hidden="true"></span> @item.ListAggregatorName
                                    </div>
                                </li>*@


                            <li class="p-1">


                                @if (!string.IsNullOrEmpty(card))
                                {<div class="card" style="margin:1px;padding:1px">
                                        <table style="width:100%;padding:0px">

                                            <tr style="width:100%;padding:0px">
                                                <td style="width:100%;padding:0px">

                                                    <ListItemComponent item="@item"></ListItemComponent>


                                                </td>
                                            </tr>
                                            <tr style="width:100%;padding:0px">
                                                <td>
                                                    <select class="btn btn-secondary" @onchange="((e) => SelectChanged(e, item))">



                                                        <option selected="@(item.Permission == 1)" value="1">Admin</option>
                                                        <option selected="@(item.Permission == 2)" value="2">Editor</option>
                                                        <option selected="@(item.Permission == 3)" value="3">Reader</option>
                                                        }
                                                    </select>
                                                </td>
                                                <td>
                                                    <a style="text-underline-position:below; cursor:pointer; color:blue; display:inline;
                                " @onclick="(() => DeleteToListAggregator(item))">Delete</a>


                                                </td>
                                            </tr>

                                        </table>
                                    </div>
                                }
                                else
                                {<table style="width:100%;padding:0px">

                                        <tr>
                                            <td style="width:100%">
                                                @*<ListItemComponent DeleteItemEvent="(() => DeleteListAggregator(item))"
                                                    EditItemEvent="(() => EditListAggregator(item))"
                                                    EditListItemId="EditListAggregatorId"
                                                    item="@item"
                                                    ChoosedItemId="@listAggregatorChoosed?.ListAggregatorId"
                                                    ListItemClickedEvent="(() => ListAggregationClicked(item))"
                                                    ListItemDragStartEvent="(() => ListDragStart(null))"
                                                    ListItemDropEvent="(() => ListDrop(null))"
                                                    SaveItemEvent="(() => SaveListAggregator(item))"></ListItemComponent>*@
                                                <ListItemComponent item="@item"></ListItemComponent>


                                            </td>

                                            <td>
                                                <select class="btn btn-secondary" @onchange="((e) => SelectChanged(e, item))">



                                                    <option selected="@(item.Permission == 1)" value="1">Admin</option>
                                                    <option selected="@(item.Permission == 2)" value="2">Editor</option>
                                                    <option selected="@(item.Permission == 3)" value="3">Reader</option>
                                                    }
                                                </select>
                                            </td>
                                            <td>
                                                <a style="text-underline-position:below; cursor:pointer; color:blue; display:inline;
                                " @onclick="(() => DeleteToListAggregator(item))">Delete</a>

                                                @*<a class="" style="text-underline-position:below; cursor:pointer; color:blue; display:inline;
                                                    " @onclick="(() => SaveToListAggregator())" >Save</a>*@

                                            </td>
                                        </tr>
                                    </table>
                                }



                            </li>
                        }
                </ul>
            </div>

            @if (chosedListPermission != null)
            {

                <table style="width:inherit;margin-left:3px; margin-bottom:20px">
                    <tr>
                        <td style="width:81%">
                            <EditForm Model="addEditUser">

                                <InputText class="form-control" @bind-Value="addEditUser.User.EmailAddress" placeholder="Add new user" />
                            </EditForm>
                        </td>

                        <td>
                            <select @bind="@addEditUser.Permission" class="btn btn-secondary">


                                <option value="1">Admin</option>
                                <option value="2">Edit</option>
                                <option value="3">Read</option>
                                }
                            </select>

                        </td>
                        <td align="center">
                            <a style="text-underline-position:below; cursor:pointer; color:blue; display:inline;
                                " @onclick="(() => InviteUserToListAggregator())">Invite user</a>
                        </td>
                    </tr>
                </table>

            }



        </div>

    </div>
</div>




@code
{
    List<ListAggregationWithUsersPermission> data;

    UserPermissionToListAggregation addEditUser = new UserPermissionToListAggregation { Permission = 2, User = new User() };

    [CascadingParameter] public IModalService Modal { get; set; }

    async void ModalQuestion(ModalResult res)
    {

        if (res.Data != null && (bool)res.Data)
        {
            var info = await userService.ChangeUserPermission(itemClicked, chosedListAggrId);


            if (info.IsError)
            {
                var param = new ModalParameters();

                param.Add("Info", info.Message);

                Modal.Show<ModalInfo>("Information", param);
                itemClicked.Permission = permissionWantToChange;
                StateHasChanged();

            }

        }
        else
        {
            itemClicked.Permission = permissionWantToChange;
            StateHasChanged();
        }

        //Modal.OnClose -= ModalQuestion;
    }

    int permissionWantToChange;

    async Task SelectChanged(ChangeEventArgs e, UserPermissionToListAggregation item)
    {
        var user = await authenticationStateProvider.GetAuthenticationStateAsync();

        itemClicked = item;
        permissionWantToChange = item.Permission;
        item.Permission = int.Parse(e.Value.ToString());

        if (user.User.Identity.Name == item.User.EmailAddress)
        {

            var paramQ = new ModalParameters();
            paramQ.Add("Line1", "You are change yours permission!");
            paramQ.Add("Line2", "Are you sure?");
            paramQ.Add("Warning", true);


            //Modal.OnClose += ModalQuestion;


            var res = Modal.Show<ModalInfoQuestion>("Warning!", paramQ);

            ModalQuestion(await res.Result);

            return;
        }



        var info = await userService.ChangeUserPermission(item, chosedListAggrId);
        var message = info.Message;

        var param = new ModalParameters();

        if (info.IsSuccess)
        {

            message = $"Permision of {item.Name} was changed sucessffully.";
        }
        else
        {
            item.Permission = permissionWantToChange;
            StateHasChanged();

        }

        param.Add("Info", message);
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            FocusFirstElement=false
        };


        Modal.Show<ModalInfo>("Information", param, options);
    }

    async Task DeleteToListAggregator(UserPermissionToListAggregation item)
    {

        await DeleteItem(item);



    }
    void SaveToListAggregator()
    {

        //userService.AddUserPermission(addEditUser, chosedListAggrId);

    }

    async Task AddToListAggregator()
    {

        var info = await userService.AddUserPermission(addEditUser, chosedListAggrId);

        var param = new ModalParameters();
        param.Add("Info", info.Message);

        Modal.Show<ModalInfo>("Information", param);

    }



    async Task InviteUserToListAggregator()
    {

        var info = await userService.InviteUserPermission(addEditUser, chosedListAggrId);

        var param = new ModalParameters();
        param.Add("Info", info.Message);

        Modal.Show<ModalInfo>("Information", param);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                data = await userService.GetListAggrWithUsersPermAsync();
            }
            catch
            {

                ((ShoppingList_WebClient.Data.CustomAuthenticationStateProvider)authenticationStateProvider).MarkUserAsLoggedOut();

                navigationManager.NavigateTo("login");

            }
            //  listAggregatorChoosed = data.ListAggregators.Where(a => a.ListAggregatorId == listAggregatorId).FirstOrDefault();


            BrowserService.OnResize += BrowserHasResized;
            await JSRuntime.InvokeAsync<object>("registerResizeCallback");

            var dimension = await broserService.GetDimensions();
            await BrowserHasResized(dimension.Width);
            await JSRuntime.InvokeAsync<object>("SayHelloJS");

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    List<UserPermissionToListAggregation> chosedListPermission;

    int chosedListAggrId;

    void ListAggregationClicked(ListAggregationWithUsersPermission item)
    {

        chosedListPermission = item.UsersPermToListAggr;
        chosedListAggrId = item.ListAggregator.ListAggregatorId;
    }



    async Task DeleteItem(UserPermissionToListAggregation item)
    {
        var user = await authenticationStateProvider.GetAuthenticationStateAsync();

        itemClicked = item;

        var param = new ModalParameters();
        param.Add("Name", item.User.EmailAddress);



        if (item.User.EmailAddress == user.User.Identity.Name)
        {
            var paramQ = new ModalParameters();
            paramQ.Add("Line1", "You are delete yours permission!");
            paramQ.Add("Line2", "Are you sure?");
            paramQ.Add("Warning", true);
            paramQ.Add("Function", new Action(ModalDelelete));

            Modal.Show<ModalInfoQuestion>("Warning!", paramQ);
        }
        else
        {
            Modal.Show<ModalDelete>("Delete", param);

        }

    }

    UserPermissionToListAggregation itemClicked;


    async void ModalDelelete()
    {
            var info = await userService.DeleteUserPermission(itemClicked, chosedListAggrId);


            var param = new ModalParameters();
            param.Add("Info", info.Message);

            Modal.Show<ModalInfo>("Information", param);
    }


    string windowWidth;
    string card = "";
    string styleForContainer = "";
    bool firstSmallWindowRender = true;

    RenderFragment tabele =
    @<tr></tr>;

private async Task BrowserHasResized(int windowWidth)
{

// var resolution = await broserService.GetDimensions();


this.windowWidth = windowWidth.ToString();


if (windowWidth < 992)
{

if (firstSmallWindowRender)
{
firstSmallWindowRender = false;
await JSRuntime.InvokeAsync<object>("Collapse");

}

card = "card";
styleForContainer = "padding:0px; margin: 0px";

}
else
{

card = "";
styleForContainer = "";
}



StateHasChanged();
}

public void Dispose()
{
BrowserService.OnResize -= BrowserHasResized;
}


}

